import React, { useState, useEffect, useRef } from "react";

function HelpPage() {

    return (
        <>
            <div className="p-6 mx-auto text-gray-800">
                <h1 className="text-4xl font-bold mb-4">CityLearn UI</h1>
                <p className="mb-6">
                    CityLearn UI is a visual dashboard for exploring simulation data generated by the CityLearn  framework.
                    It was developed to simplify the analysis of results from smart energy communities, district energy coordination,
                    demand response (among other applications), allowing users to visually inspect building-level components, compare
                    simulation KPIs, and create simulation schemas with ease.
                </p>

                <div className="mb-6">
                    <strong>The interface is available in two options:</strong>
                    <ul className="list-disc ml-6">
                        <li>
                            <a href="https://citylearn-ui.softcps.org" target="_blank" rel="noopener noreferrer" className="text-blue-600 underline">
                                Web app
                            </a> (free hosted version — not recommended for sensitive/personal data)
                        </li>
                        <li>
                            <a href="https://github.com/SoftCPS/citylearn-ui" target="_blank" rel="noopener noreferrer" className="text-blue-600 underline">
                                Open-source code on GitHub
                            </a>
                        </li>
                    </ul>
                    <p className="mt-2"><strong>Compatibility:</strong> This version of the UI currently supports CityLearn v2.4 simulation data.</p>
                    <p><strong>Developed by:</strong> SoftCPS, Software for Cyber-Physical Systems (SoftCPS) research group (ISEP, Portugal) in collaboration with the Intelligent Environments Lab, University of Texas at Austin</p>
                </div>

                <section className="mb-10">
                    <h2 className="text-2xl font-semibold mb-2">Exporting Data From CityLearn into CityLearn UI</h2>
                    <p>
                        CityLearn automatically exports the folder structure expected by the UI. There are three workflows to consider:
                    </p>
                    <ul className="list-disc list-inside mb-4">
                        <li>
                            <code>render=False</code> (default): no CSVs are produced, so the UI
                            cannot ingest data.
                        </li>
                        <li>
                            <code>render=True</code>: data is exported every simulation step into timestamped folders. You may keep the default location
                            (<code>&lt;project&gt;/render_logs/&lt;timestamp&gt;</code>) or set <code>render_directory</code>/<code>render_directory_name</code> on :class: <code>citylearn.citylearn.CityLearnEnv</code> to choose the destination.
                        </li>
                        <li>
                            <code>render=False</code> with explicit export: keep rendering off for
                            faster runs and call :meth: <code>citylearn.citylearn.CityLearnEnv.export_final_kpis</code> (or a custom
                            exporter) at the end. This lazily creates the render folder and writes
                            the same CSV layout required by the UI.
                        </li>
                    </ul>

                    <h3 className="text-xl font-semibold mt-6 mb-2">Render-on Example</h3>
                    <pre className="p-1 rounded-lg overflow-x-auto text-sm">
                        <code>{`from pathlib import Path
from citylearn.citylearn import CityLearnEnv

schema = 'data/datasets/citylearn_challenge_2022_phase_all_plus_evs/schema.json'

env = CityLearnEnv(
    schema,
    central_agent=True,
    episode_time_steps=48,
    render=True,
    render_directory=Path('outputs/ui_exports'), # optional custom base folder
)

observations, _ = env.reset()
while not env.terminated:
    actions = [env.action_space[0].sample()]
    observations, reward, terminated, truncated, info = env.step(actions)`}
                        </code>
                    </pre>
                    <p className="mt-2">
                        The code above writes per-step CSV files into{" "}
                        <code>outputs/ui_exports/&lt;timestamp&gt;/</code>. Omitting{" "}
                        <code>render_directory</code> stores the results in{" "}
                        <code>render_logs/&lt;timestamp&gt;/</code> by default.
                    </p>

                    <h3 className="text-xl font-semibold mt-6 mb-2"> Export-at-the-End Example </h3>
                    <pre className="p-1 rounded-lg overflow-x-auto text-sm">
                        <code>{`from citylearn.citylearn import CityLearnEnv

env = CityLearnEnv(schema, central_agent=True, episode_time_steps=48, render=False)
observations, _ = env.reset()
while not env.terminated:
    actions = [env.action_space[0].sample()]
    observations, reward, terminated, truncated, info = env.step(actions)

class _Model:
    pass

model = _Model()
model.env = env

env.export_final_kpis(model, filepath='exported_kpis.csv')
print('Render folder:', env.new_folder_path)`}</code>
                    </pre>
                    <p className="mt-2">
                        This pattern keeps rendering off (fastest) and emits the UI-compatible
                        folder once the run completes. The helper reuses the same rules for{" "}
                        <code>render_directory</code>/<code>render_directory_name</code> if they
                        were provided during construction.
                    </p>

                    <p className="mt-4">
                        The UI consumes the directory produced by either of the latter two
                        approaches. The system uses the :meth: <code>~citylearn.citylearn.CityLearnEnv.render</code> method to iterate over buildings, electric vehicles, batteries, chargers, pricing, etc., using their <code>as_dict</code> outputs
                        to build CSV histories where each row corresponds to a time instant and columns include units. Timestamps are converted to calendar dates for display. You can disable step-wise exporting by keeping <code>render=False</code> and relying on the end-of-run exporter.
                    </p>
                </section>

                <section className="mb-10">
                    <h2 className="text-2xl font-semibold mb-2">Pages within CityLearn UI</h2>

                    <p>
                        CityLearn UI has 3 main pages, each with its own functionalities. Following, we describe functionality and give a short explanation on how to use it.
                    </p>
                    {/* Dashboard Overview */}
                    <div className="mb-8">
                        <h3 className="text-xl font-bold mb-2">Dashboard Overview</h3>
                        <p>This is the landing page users see when they first open the application. It allows you to upload and explore data from simulations.</p>

                        <h4 className="font-semibold mt-4">Uploading Simulations</h4>
                        <p>Start by clicking "Upload Simulations" to open your file explorer. You’ll need to select a folder structured as follows:</p>
                        <ul className="list-disc ml-6">
                            <li>The main folder must be named SimulationData.</li>
                            <li>Inside, include subfolders named after each simulation.</li>
                            <li>Each simulation folder should contain CSV files with specific naming conventions:</li>
                            <ul>
                                <li><b>Buildings:</b> exported_data_building_X where X is the building number</li>
                                <li><b>Components:</b> Add a suffix like "_battery" or "_charger_X_Y" where X is the building number and Y is the building component number</li>
                                <li><b>Episodes:</b> Always end filenames with _epZ, where Z is the episode number (e.g., exported_data_building_1_battery_ep3.csv)</li>
                            </ul>
                        </ul>
                        <p>Make sure all file and folder names follow this format to avoid errors.</p>

                        <h4 className="font-semibold mt-4">Selecting Simulations</h4>
                        <p>Once a valid folder is uploaded, a "Select Simulations" button will appear. Clicking it opens a window where you can choose which simulations to view. The “Confirm” button will only activate once at least one simulation is selected.</p>
                        <img src="/img/selecting-simulations.png" alt="Selecting Simulations" className="rounded shadow" />

                        <h4 className="font-semibold">Viewing Simulation Data</h4>
                        <p>After confirming, each selected simulation will appear as a tab on the page. Inside each tab:</p>
                        <ul className="list-disc ml-6">
                            <li>A sidebar on the left lists all elements in the simulation (e.g., buildings).</li>
                            <li>Components are grouped into: Consumption, Production, Other Equipments (like Batteries, Chargers, etc.)</li>
                            <li>Selecting a component displays its corresponding graph on the right side of the screen.</li>
                        </ul>

                        <p>This layout makes it easy to navigate and analyze simulation data by building and component.</p>
                        <img src="/img/simulation-data.png" alt="Simulation Data" className="w-50 rounded shadow" />

                        <h4 className="font-semibold">Graphs and Filters</h4>
                        <p>All the graphs present have some logic regarding how you can filter and view the data currently being displayed. This logic is presented in three different ways:</p>
                        <ul className="list-disc ml-6">
                            <li>Changing the time interval between each step <b>(highlighted in red)</b></li>
                            <li>Filtering the data to be displayed using checkboxes <b>(highlighted in green)</b></li>
                            <li>Filtering the start and end dates of the period for which data can be viewed, represented by a slider <b>(highlighted in blue)</b></li>
                        </ul>
                    </div>

                    {/* KPIs Page */}
                    <div className="mb-8">
                        <h3 className="text-xl font-bold mb-2">KPIs Page Overview</h3>
                        <p>The KPIs page works similarly to the REC Dashboards page, allowing users to upload simulation data folders and select which simulations to analyze.</p>
                        <p>Once a simulation is selected, its KPIs are displayed in a table. Each row represents a KPI, and each column represents a building associated with that KPI.</p>
                        <img src="/img/kpis-data.png" alt="KPIs Table" className="rounded shadow" />

                        <h4 className="font-semibold">Comparing Simulations</h4>
                        <p>When multiple simulations are loaded (shown as tabs), a "Compare" button appears above the table. Clicking this opens a selection window like the one used for choosing simulations, to select one simulation for comparison.</p>
                        <p>After selecting and confirming, a new tab called "Comparison" appears. This tab shows the difference between the selected simulation and the current one (i.e., Simulation Y – Simulation X).</p>
                        <img src="/img/kpis-comparison.png" alt="KPI Comparison" className="rounded shadow" />

                        <h4 className="font-semibold">Visual Highlights</h4>
                        <ul className="list-disc ml-6">
                            <li>Positive results (improvements) are shown in <span style={{
                                color: "green",
                                fontWeight: "bold"
                            }}>bold green</span></li>
                            <li>Negative results (declines) are shown in <span style={{
                                color: "red",
                                fontWeight: "bold"
                            }}>bold red</span></li>
                            <li>Zero differences are displayed in <b>black</b> with no highlights.</li>
                        </ul>
                    </div>

                    {/* Create Schema Page */}
                    <div className="mb-8">
                        <h3 className="text-xl font-bold mb-2">Create Schema Overview</h3>
                        <p>The Create Schema page is divided into three main sections, guiding users through the process of creating a simulation schema.</p>

                        <h4 className="font-semibold mt-4">1. Dataset Information</h4>
                        <p>This section includes general information about the dataset:</p>
                        <ul className="list-disc ml-6">
                            <li>Name of the dataset</li>
                            <li>Basic settings like the time period, selected observations and actions</li>
                        </ul>
                        <img src="/img/dataset-info.png" alt="Dataset Info" className="rounded shadow" />

                        <h4 className="font-semibold">2. Agent & Reward Configuration</h4>
                        <p>Here, users define agent-related details:</p>
                        <ul className="list-disc ml-6">
                            <li>Choose an agent type and a reward function</li>
                            <li>Upload a JSON configuration file for the agent</li>
                            <li>A preview of the file is shown upon upload, allowing you to edit its contents directly if needed</li>
                        </ul>
                        <img src="/img/agent-reward-config.png" alt="Agent Config" className="rounded shadow" />

                        <h4 className="font-semibold">3. Schema Structure (Canvas)</h4>
                        <p>The third section is a visual canvas for building the structure of the schema:</p>

                        <ul className="list-disc ml-6">
                            <li>On the left panel, you’ll find a list of available components</li>
                            <li>Drag and drop components (like buildings or equipment) onto the canvas</li>
                        </ul>

                        <p>Each component includes configurable fields that must be filled out for accurate simulation data.</p>
                        <p>You can also:</p>

                        <ul className="list-disc ml-6">
                            <li>Link equipment to buildings by connecting them with lines</li>
                            <li>Rename, copy, and paste components to streamline the setup of similar items</li>
                        </ul>

                        <img src="/img/schema-structure.png" alt="Schema Canvas" className="mb-4 rounded shadow" />

                        <p>This intuitive layout simplifies the process of defining and managing complex simulation schemas.</p>
                    </div>
                </section>
            </div>
        </>
    );
}

export default HelpPage;